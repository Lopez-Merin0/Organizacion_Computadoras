;Direccionamiento relativo a base mas indice

section .data
numero1 dd 5        
numero2 dd 7        
resultado dd 0       

section .text
global _start        
_start:
    mov ebx, numero1   ; Carga la dirección de memoria de "numero1" en el registro ebx
    mov ecx, numero2 - numero1  ; Calcula el desplazamiento relativo entre "numero1" y "numero2"
    mov eax, [ebx]     ; Mueve el valor de "numero1" a eax
    add ebx, ecx       ; Suma el desplazamiento relativo a ebx
    add eax, [ebx]     ; Suma el valor apuntado por ebx (valor de "numero2") a eax
    mov ebx, resultado ; Carga la dirección de memoria de "resultado" en ebx
    mov [ebx], eax     ; Guarda el resultado en la dirección de memoria de "resultado"
    
    mov eax, 1         ; Código de la llamada al sistema para salir (sys_exit)
    xor ebx, ebx       ; Limpia el registro ebx, poniéndolo a 0 (esto será el código de retorno)
    int 0x80           ; Interrupción de software para llamar al kernel y ejecutar la llamada al sistema
