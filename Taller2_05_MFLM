;Direccionamiento base más índice

section .data
numero1 dd 5         ; Define una variable de 32 bits (4 bytes) llamada "numero1" y la inicializa con 5
numero2 dd 7         ; Define una variable de 32 bits (4 bytes) llamada "numero2" y la inicializa con 7
resultado dd 0       ; Define una variable de 32 bits (4 bytes) llamada "resultado" y la inicializa con 0

section .text
global _start        ; Define la etiqueta global _start, que es el punto de entrada del programa
_start:
    mov ebx, numero1   ; Carga la dirección base de "numero1" en el registro ebx
    mov ecx, 4         ; Carga el tamaño en bytes de cada elemento (un entero de 32 bits) en el registro ecx
    mov eax, [ebx]     ; Mueve el valor de "numero1" a eax
    add ebx, ecx       ; Avanza el puntero para apuntar a "numero2"
    add eax, [ebx]     ; Suma el valor de "numero2" a eax
    mov ebx, resultado ; Carga la dirección de memoria de "resultado" en ebx
    mov [ebx], eax     ; Guarda el resultado en la dirección de memoria de "resultado"
    
    mov eax, 1         ; Código de la llamada al sistema para salir (sys_exit)
    xor ebx, ebx       ; Limpia el registro ebx, poniéndolo a 0 (esto será el código de retorno)
    int 0x80           ; Interrupción de software para llamar al kernel y ejecutar la llamada al sistema
