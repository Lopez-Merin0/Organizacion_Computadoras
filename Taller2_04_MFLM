;Direccionamiento directo

section .data
numero1 dd 5         ; Define una variable de 32 bits (4 bytes) llamada "numero1" y la inicializa con 5
numero2 dd 7         ; Define una variable de 32 bits (4 bytes) llamada "numero2" y la inicializa con 7
resultado dd 0       ; Define una variable de 32 bits (4 bytes) llamada "resultado" y la inicializa con 0

section .text
global _start        ; Define la etiqueta global _start, que es el punto de entrada del programa
_start:
    mov eax, [numero1]   ; Mueve el valor de la variable "numero1" al registro eax
    add eax, [numero2]   ; Suma el valor de la variable "numero2" al valor actual de eax
    mov [resultado], eax ; Guarda el valor de eax (la suma) en la variable "resultado"
    
    mov eax, 1           ; Código de la llamada al sistema para salir (sys_exit)
    xor ebx, ebx         ; Limpia el registro ebx, poniéndolo a 0 (esto será el código de retorno)
    int 0x80             ; Interrupción de software para llamar al kernel y ejecutar la llamada al sistema
